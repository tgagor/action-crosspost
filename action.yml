name: Crosspost Action
description: "Automatically submits URLs to variety of social networks like: Bluesky, Mastodon, Twitter, LinedIn, Discord, Telgram, Dev.to."
branding:
  icon: send
  color: blue
inputs:
  feed-url:
    description: URL to sitemap.xml, rss.xml or atom.xml
    required: true
  since:
    description: Post only items newer than this (e.g. '1' 'since-unit' ago)
    required: false
    default: "1"
  since-unit:
    description: Unit for 'since' input (e.g. minute, hour, day, week, month, year)
    required: false
    default: day
  limit:
    description: Maximum number of items to post. Use 0 for no limit.
    required: false
    default: "5"
  failure-strategy:
    description: "Define how to handle failures. Options: ignore, fail."
    required: false
    default: ignore
  lastmod-required:
    description: "Define the behavior when lastmod tag is not present in sitemap. Options: ignore, error."
    required: false
    default: error
  exclude-urls:
    description: "Exclude URLs, that you don't want to be posted."
    required: false
    default: ""
  filter-urls:
    description: "Only include URLs that match this filter (e.g. /blog/)."
    required: false
    default: ""

  message:
    description: Message to include with the post. Use {url} to include the URL.
    required: false
    default: "{url}"

  dry-run:
    description: If true, the action will only simulate posting without actually sending any posts.
    required: false
    default: "false"

  # Twitter
  twitter-access-token-key:
    description: Twitter Access Token Key
    required: false
    default: ""
  twitter-access-token-secret:
    description: Twitter Access Token Secret
    required: false
    default: ""
  twitter-api-consumer-key:
    description: Twitter API Consumer Key
    required: false
    default: ""
  twitter-api-consumer-secret:
    description: Twitter API Consumer Secret
    required: false
    default: ""

  # Mastodon
  mastodon-access-token:
    description: Mastodon Access Token
    required: false
    default: ""
  mastodon-host:
    description: Mastodon Host (e.g. mastodon.social)
    required: false
    default: ""

  # Bluesky
  bluesky-host:
    description: Bluesky Host (e.g. bsky.social)
    required: false
    default: ""
  bluesky-identifier:
    description: Bluesky Identifier (e.g. user.bsky.social)
    required: false
    default: ""
  bluesky-password:
    description: Bluesky Password for the account
    required: false
    default: ""

  # LinkedIn
  linkedin-access-token:
    description: LinkedIn Access Token
    required: false
    default: ""

  # Discord
  discord-bot-token:
    description: Discord Bot Token
    required: false
    default: ""
  discord-channel-id:
    description: Discord Channel ID
    required: false
    default: ""

  # Discord Webhook
  discord-webhook-url:
    description: Discord Webhook URL
    required: false
    default: ""

  # Dev.to
  devto-api-key:
    description: dev.to API Key
    required: false
    default: ""

  # Telegram
  telegram-bot-token:
    description: Telegram Bot Token
    required: false
    default: ""
  telegram-chat-id:
    description: Telegram Chat ID
    required: false
    default: ""

  # Slack
  slack-token:
    description: Slack Token
    required: false
    default: ""
  slack-channel:
    description: Slack Channel
    required: false
    default: ""

outputs:
  latest-urls:
    description: Latest URLs found in sitemap
    value: ${{ steps.get-urls.outputs.latest-urls }}
  processed-urls:
    description: Only filtered & non-excluded URLs
    value: ${{ steps.get-urls.outputs.processed-urls }}

runs:
  using: composite
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "${{ github.action_path }}/**/pyproject.toml"

    - name: Install Python deps
      shell: bash
      run: |
        uv venv
        uv pip install -r ${{ github.action_path }}/scripts/pyproject.toml

    - name: Get URLs from Sitemap
      id: get-urls
      shell: bash
      run: |
        uv run python ${{ github.action_path }}/scripts/get_urls.py \
          --feed-url "${{ inputs.feed-url }}" \
          --since "${{ inputs.since }}" \
          --since-unit "${{ inputs.since-unit }}" \
          --exclude-urls "${{ inputs.exclude-urls }}" \
          --filter-urls "${{ inputs.filter-urls }}"

    - name: Install Node
      if: ${{ steps.get-urls.outputs.processed-urls }}
      uses: actions/setup-node@v5
      with:
        node-version: 22.x

    - name: Install crosspost
      if: ${{ steps.get-urls.outputs.processed-urls }}
      shell: bash
      run: |
        npm install -g "@humanwhocodes/crosspost@0.17.0"

    - name: Post URLs with Crosspost
      if: ${{ steps.get-urls.outputs.processed-urls }}
      id: post-urls
      shell: bash
      env:
        MESSAGE: ${{ inputs.message }}
        TWITTER_ACCESS_TOKEN_KEY: ${{ inputs.twitter-access-token-key }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ inputs.twitter-access-token-secret }}
        TWITTER_API_CONSUMER_KEY: ${{ inputs.twitter-api-consumer-key }}
        TWITTER_API_CONSUMER_SECRET: ${{ inputs.twitter-api-consumer-secret }}
        MASTODON_ACCESS_TOKEN: ${{ inputs.mastodon-access-token }}
        MASTODON_HOST: ${{ inputs.mastodon-host }}
        BLUESKY_HOST: ${{ inputs.bluesky-host }}
        BLUESKY_IDENTIFIER: ${{ inputs.bluesky-identifier }}
        BLUESKY_PASSWORD: ${{ inputs.bluesky-password }}
        LINKEDIN_ACCESS_TOKEN: ${{ inputs.linkedin-access-token }}
        DISCORD_BOT_TOKEN: ${{ inputs.discord-bot-token }}
        DISCORD_CHANNEL_ID: ${{ inputs.discord-channel-id }}
        DISCORD_WEBHOOK_URL: ${{ inputs.discord-webhook-url }}
        DEVTO_API_KEY: ${{ inputs.devto-api-key }}
        TELEGRAM_BOT_TOKEN: ${{ inputs.telegram-bot-token }}
        TELEGRAM_CHAT_ID: ${{ inputs.telegram-chat-id }}
        SLACK_TOKEN: ${{ inputs.slack-token }}
        SLACK_CHANNEL: ${{ inputs.slack-channel }}
        DRY_RUN: ${{ (inputs.dry-run == 'true' || inputs.dry-run == 'TRUE' || inputs.dry-run == 'True') && 'true' || '' }}
        LIMIT: ${{ inputs.limit }}
        FAILURE_STRATEGY: ${{ inputs.failure-strategy }}
      run: |
        uv run python ${{ github.action_path }}/scripts/post_urls.py \
          --urls "${{ steps.get-urls.outputs.processed-urls }}" \
          --limit "$LIMIT" \
          --failure-strategy "$FAILURE_STRATEGY" \
          --message "$MESSAGE" \
          ${DRY_RUN:+--dry-run}
